Constructor section
===================

A constructor pipeline section is the heart of a transmogrifier content import
pipeline. It constructs Plone content based on the items it processes. The
constructor section blueprint name is
``collective.transmogrifier.sections.constructor``. Constructor sections do
only one thing, they construct *new* content. No schema changes are made.

Construction needs 3 pieces of information: the path to the folder where to
create the object, it's id, and it's portal type. To determine each of these,
the constructor section inspects each item and looks for several keys, as
described below. Any item missing any of these three pieces will be skipped.
Similarly, items with a path or type that doesn't exist will be skipped as
well; make sure that these paths are constructed beforehand. Because a
constructor section will only construct new objects, if an object with the
same id in the same context already exists, the item will also be skipped.

For the object id, it'll look (in order) for
``_collective.transmogrifier.sections.constructor_[sectionname]_id``,
``_collective.transmogrifier.sections.constructor_id``, ``_[sectionname]_id``,
``_id``, ``getId`` and ``id``, where ``[sectionname]`` is replaced with the
name given to the current section. This allows you to target the right section
precisely if needed. Alternatively, you can specify what key to use for the id
by specifying the ``id-key`` option, which should be a list of keys to try
(one key per line, use a ``re:`` or ``regexp:`` prefix to specify regular expressions).

For the portal type, use the ``type-key`` option to specify a set of keys just
like ``id-key``. If omitted, the constructor will look for
``_collective.transmogrifier.sections.constructor_[sectionname]_type``,
``_collective.transmogrifier.sections.constructor_type``,
``_[sectionname]_type``, ``_type``, ``portal_type`` and ``Type`` (in that
order, with ``[sectionname]`` replaced).

For the path, use the ``path-key`` option (same interpretation as ``type-key``
and ``id-key``), defaulting to
``_collective.transmogrifier.sections.constructor_[sectionname]_path``,
``_collective.transmogrifier.sections.constructor_path``,
``_[sectionname]_path``, ``_path``.

Using the path, id and type, a new object will be constructed using
invokeFactory; nothing else is done. Paths are always interpreted as relative
to the portal object.

>>> import pprint
>>> constructor = """
... [transmogrifier]
... pipeline =
...     contentsource
...     constructor
...     printer
...     
... [contentsource]
... blueprint = collective.transmogrifier.sections.tests.contentsource
... 
... [constructor]
... blueprint = collective.transmogrifier.sections.constructor
... 
... [printer]
... blueprint = collective.transmogrifier.sections.tests.pprinter
... """
>>> registerConfig(u'collective.transmogrifier.sections.tests.constructor',
...                constructor)
>>> transmogrifier(u'collective.transmogrifier.sections.tests.constructor')
{'_type': 'FooType', '_id': 'foo', '_path': '/spam/eggs'}
{'Title': 'Should not be constructed, not an existing path',
 '_id': 'bar',
 '_path': 'not/existing',
 '_type': 'BarType'}
{'Title': 'Should not be constructed, an existing object',
 '_id': 'existing',
 '_path': '/spam/eggs',
 '_type': 'FooType'}
{'Title': 'Should not be constructed, no type',
 '_id': 'incomplete',
 '_path': '/spam/eggs'}
{'Title': 'Should not be constructed, not an existing type',
 '_id': 'nosuchtype',
 '_path': '/spam/eggs',
 '_type': 'NonExisting'}
{'Title': 'Factories are allowed to change the id',
 '_id': 'changedByFactory',
 '_path': '/spam/eggs',
 '_type': 'FooType'}
>>> pprint.pprint(plone.constructed)
(('spam/eggs', 'foo', 'FooType'), ('spam/eggs', 'changedByFactory', 'FooType'))
